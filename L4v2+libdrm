#define _GNU_SOURCE
#include <errno.h>
#include <fcntl.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <time.h>
#include <unistd.h>
#include <xf86drm.h>
#include <xf86drmMode.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/un.h>
#include <linux/videodev2.h>
#include <poll.h>
#include <utils/Log.h>
#include <pthread.h>
#include <sys/epoll.h>
#include <drm.h>
#include <drm_fourcc.h>

#define ERRSTR strerror(errno)

#define BYE_ON(cond, ...) \
do { \
	if (cond) { \
		int errsv = errno; \
		fprintf(stderr, "ERROR(%s:%d) : ", \
			__FILE__, __LINE__); \
		errno = errsv; \
		fprintf(stderr,  __VA_ARGS__); \
		abort(); \
	} \
} while(0)

static inline int warn(const char *file, int line, const char *fmt, ...)
{
	int errsv = errno;
	va_list va;
	va_start(va, fmt);
	fprintf(stderr, "WARN(%s:%d): ", file, line);
	vfprintf(stderr, fmt, va);
	va_end(va);
	errno = errsv;
	return 1;
}

#define WARN_ON(cond, ...) \
	((cond) ? warn(__FILE__, __LINE__, __VA_ARGS__) : 0)

struct buffer_object {
	uint32_t width;
	uint32_t height;
	uint32_t pitch;
	uint32_t handle;
	uint32_t size;
	void* vaddr;
	unsigned int fb_handle;
	void* start;
	unsigned int length;  
};


struct Parmeter {
        int video_number;
        int plane_index;
};

pthread_t pCameraThread16;
pthread_t pCameraThread17;
pthread_t pCameraThread18;
pthread_t pCameraThread19;

static int buffer_create(int drmfd, struct buffer_object *bo,
	uint64_t size, uint32_t pitch,struct v4l2_format fmt) {
	struct drm_mode_create_dumb gem;
 	struct drm_mode_map_dumb map = {};
	struct drm_mode_destroy_dumb gem_destroy;
	int ret;

	memset(&gem, 0, sizeof gem);
	gem.width = bo->width;
	gem.height = bo->height;
	gem.bpp = 32;
	gem.size = size;
	ret = ioctl(drmfd, DRM_IOCTL_MODE_CREATE_DUMB, &gem);
	if (WARN_ON(ret, "CREATE_DUMB failed: %s\n", ERRSTR))
		return -1;
	printf("bo %u %ux%u bpp %u size %lu (%lu)\n", gem.handle, gem.width, gem.height, gem.bpp, (long)gem.size, (long)size);
	bo->pitch = gem.pitch;
	bo->size = gem.size;
        bo->handle = gem.handle;         

        printf(" gem.pitch = %d \n",gem.pitch);
	uint32_t offsets[4] = { 0 };
	uint32_t pitches[4] = { pitch };
	uint32_t bo_handles[4] = { bo->handle };
	unsigned int fourcc = fmt.fmt.pix.pixelformat;

        printf(" fourcc = %d  DRM_FORMAT_UYVY = %d \n",fourcc,DRM_FORMAT_UYVY);

	fprintf(stderr, "FB fourcc %c%c%c%c\n",
		fourcc,
		fourcc >> 8,
		fourcc >> 16,
		fourcc >> 24);

	ret = drmModeAddFB2(drmfd, bo->width, bo->height, fourcc, bo_handles,
		pitches, offsets, &bo->fb_handle, 0);

	map.handle = gem.handle;
	drmIoctl(drmfd, DRM_IOCTL_MODE_MAP_DUMB, &map);

	bo->vaddr = mmap(0, gem.size, PROT_READ | PROT_WRITE,
			MAP_SHARED, drmfd, map.offset);

	memset(bo->vaddr, 0x00, bo->size);
	return 0;
}

static int modeset_create_fb(int fd, struct buffer_object *bo)
{
	struct drm_mode_create_dumb create = {};
 	struct drm_mode_map_dumb map = {};

	create.width = bo->width;
	create.height = bo->height;
	create.bpp = 32;
	drmIoctl(fd, DRM_IOCTL_MODE_CREATE_DUMB, &create);

	bo->pitch = create.pitch;
	bo->size = create.size;
	bo->handle = create.handle;
	drmModeAddFB(fd, bo->width, bo->height, 24, 32, bo->pitch,
			   bo->handle, &bo->fb_handle);

	map.handle = create.handle;
	drmIoctl(fd, DRM_IOCTL_MODE_MAP_DUMB, &map);

	bo->vaddr = mmap(0, create.size, PROT_READ | PROT_WRITE,
			MAP_SHARED, fd, map.offset);

	memset(bo->vaddr, 0x00, bo->size);

	return 0;
}

static void modeset_destroy_fb(int drmfd, struct buffer_object *bo) {
	struct drm_mode_destroy_dumb destroy = {};

	drmModeRmFB(drmfd, bo->fb_handle);

	munmap(bo->vaddr, bo->size);

	destroy.handle = bo->handle;
	drmIoctl(drmfd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy);
}

void * EventHandler(void *arg) {
	int drmfd;
	drmModeConnector *conn;
	drmModeRes *res;
	drmModePlaneRes *plane_res;
        drmModePlanePtr plane;
	uint32_t conn_id;
	uint32_t crtc_id;
	uint32_t plane_id0;
	uint32_t plane_id;
        int ret = 0;
        int i = 20;
        int buffer_count = 5;
        char video_path[99];
        struct buffer_object buffer[5];
        struct buffer_object crtcBuffer;
        struct Parmeter *parmeter;

        parmeter = (Parmeter*)arg;

        sprintf(video_path, "/dev/video%d", parmeter->video_number);
        int v4lfd = open(video_path, O_RDWR);
	struct v4l2_capability caps;
	memset(&caps, 0, sizeof caps);

	ret = ioctl(v4lfd, VIDIOC_QUERYCAP, &caps);
	BYE_ON(ret, "VIDIOC_QUERYCAP failed: %s\n", ERRSTR);

	/* TODO: add single plane support */
	BYE_ON(~caps.capabilities & V4L2_CAP_VIDEO_CAPTURE,
		"video: singleplanar capture is not supported\n");

	struct v4l2_format fmt;
	memset(&fmt, 0, sizeof fmt);
	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;

	ret = ioctl(v4lfd, VIDIOC_G_FMT, &fmt);
	BYE_ON(ret < 0, "VIDIOC_G_FMT failed: %s\n", ERRSTR);
	printf("G_FMT(start): width = %u, height = %u, 4cc = %.4s\n",
		fmt.fmt.pix.width, fmt.fmt.pix.height,
		(char*)&fmt.fmt.pix.pixelformat);

	ret = ioctl(v4lfd, VIDIOC_S_FMT, &fmt);

	struct v4l2_requestbuffers rqbufs;
	memset(&rqbufs, 0, sizeof(rqbufs));
	rqbufs.count = buffer_count;
	rqbufs.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	rqbufs.memory = V4L2_MEMORY_MMAP;

	ret = ioctl(v4lfd, VIDIOC_REQBUFS, &rqbufs);
	BYE_ON(ret < 0, "VIDIOC_REQBUFS failed: %s\n", ERRSTR);
	BYE_ON(rqbufs.count < buffer_count, "video node allocated only "
		"%u of %u buffers\n", rqbufs.count,buffer_count);
        printf(" rqbufs.count = %d \n",rqbufs.count);

	uint32_t size = fmt.fmt.pix.sizeimage;
	uint32_t pitch = fmt.fmt.pix.bytesperline;
	printf("size = %u pitch = %u\n", size, pitch);

	drmfd = drmOpen("mediatek", NULL);
	res = drmModeGetResources(drmfd);
	crtc_id = res->crtcs[0];
	conn_id = res->connectors[0];

	drmSetClientCap(drmfd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1);
	plane_res = drmModeGetPlaneResources(drmfd);

        for(int i = 0; i< plane_res->count_planes; i++) {
             printf(" plane_res->planes[%d] = %d \n",i,plane_res->planes[i]);
        } 

        plane_id0 = plane_res->planes[0];
	plane_id = plane_res->planes[parmeter->plane_index];///count_planes = 6

	conn = drmModeGetConnector(drmfd, conn_id);

        for (int i = 0; i < buffer_count;i++) {
	    buffer[i].width = conn->modes[0].hdisplay;
	    buffer[i].height = conn->modes[0].vdisplay;
        }       

	for (unsigned int i = 0; i < buffer_count; ++i) {
            ret = buffer_create(drmfd, &buffer[i], size, pitch,fmt);
            BYE_ON(ret, "failed to create buffer%d\n", i);
	}

        crtcBuffer.width = conn->modes[0].hdisplay;
        crtcBuffer.height = conn->modes[0].vdisplay;
	modeset_create_fb(drmfd, &crtcBuffer);

	drmModeSetCrtc(drmfd, crtc_id, crtcBuffer.fb_handle,0, 0, &conn_id, 1, &conn->modes[0]);       

	for (unsigned int i = 0; i < buffer_count; ++i) {
	    struct v4l2_buffer buf;
            memset(&buf, 0, sizeof buf);

	    buf.index = i;
	    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	    buf.memory = V4L2_MEMORY_MMAP;

            if(ioctl(v4lfd,VIDIOC_QUERYBUF,&buf) == -1) { 
                printf("VIDIOC_QUERYBUF failed.\n");
            } 

            buffer[i].length = buf.length;	
            buffer[i].start = mmap(NULL,buf.length,PROT_READ|PROT_WRITE,MAP_SHARED,v4lfd,buf.m.offset);  
            if(MAP_FAILED == buffer[i].start) {  
                printf("memory map failed.\n");
            } 

            ret = ioctl(v4lfd, VIDIOC_QBUF, &buf);
            BYE_ON(ret < 0, "VIDIOC_QBUF for buffer %d failed: %s \n",buf.index, ERRSTR);
	}

	int type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	ret = ioctl(v4lfd, VIDIOC_STREAMON, &type);
	BYE_ON(ret < 0, "STREAMON failed: %s\n", ERRSTR);


	drmModeSetPlane(drmfd, plane_id0, crtc_id, 0, 0,
			0, 0, 0, 0,
			0, 0, 0, 0);


	struct pollfd fds[] = {
              { .fd = v4lfd, .events = POLLIN },
	};

	while ((ret = poll(fds, 1, 5000)) > 0) {
            struct v4l2_buffer buf;

            /* dequeue buffer */
            memset(&buf, 0, sizeof buf);
            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            buf.memory = V4L2_MEMORY_MMAP;
            ret = ioctl(v4lfd, VIDIOC_DQBUF, &buf);
            BYE_ON(ret, "VIDIOC_DQBUF failed: %s\n", ERRSTR);

            memcpy(buffer[buf.index].vaddr,buffer[buf.index].start,size);

          //  if (parmeter->video_number == 16) {

            ret = drmModeSetPlane(drmfd, plane_id, crtc_id,
                                      buffer[buf.index].fb_handle, 0,
                                      0, 0,
				      400,
                                      300,
                                      0, 0, /*buf[0].width*/400 << 16, /*buf[0].height*/300 << 16);
        //    } else {
         /*   ret = drmModeSetPlane(drmfd, plane_id, crtc_id,
                                      buffer[buf.index].fb_handle, 0,
                                      500, 0,
				      400,
                                      300,
                                      0, 0, 400 << 16, 300 << 16); */
      //      }

            BYE_ON(ret, "drmModeSetPlane failed: %s\n", ERRSTR);

            int current_buffer = buf.index;

            memset(&buf, 0, sizeof buf);
            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            buf.memory = V4L2_MEMORY_MMAP;
            buf.index = current_buffer;

            ret = ioctl(v4lfd, VIDIOC_QBUF, &buf);
            BYE_ON(ret, "VIDIOC_QBUF(index = %d) failed: %s\n",
			       current_buffer, ERRSTR);
	}

        printf(" modeset_destroy_fb ");
        for (int i = 0; i < buffer_count; buffer_count++) {
            modeset_destroy_fb(drmfd, &buffer[i]);
        }

        drmModeFreeConnector(conn);
        drmModeFreePlaneResources(plane_res);
        drmModeFreeResources(res);

        close(drmfd);
    return NULL;
}

int main(int argc, char **argv) {
        int epoll_fd = -1;
        struct Parmeter video16_parmeter = {16,2};
       // struct Parmeter video17_parmeter = {17,2};
        pthread_create(&pCameraThread16, NULL, EventHandler, &video16_parmeter);
       // pthread_create(&pCameraThread17, NULL, EventHandler, &video17_parmeter);
        epoll_fd = epoll_create1(EPOLL_CLOEXEC);
        if (epoll_fd == -1) {
            printf(" epoll_create1 failed ");
        }
        while (true) {
            struct epoll_event ev;
            int nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &ev, 1, 5000));
            if (nr == -1) {
                printf(" epoll_wait failed \n");
            } else {
                printf(" epoll_wait success \n");
            }
        }
	return 0;
}
